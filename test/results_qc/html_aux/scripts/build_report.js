// Generated by CoffeeScript 1.7.1
(function() {
  var metric, readJson, recoverOrderFromCookies, report, section, showPlotWithInfo, totalReportData,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  showPlotWithInfo = function(info) {
    var newColors, newSeries;
    newSeries = [];
    newColors = [];
    return $('#legend-placeholder').find('input:checked'.each(function() {
      var i, number, series, _i, _ref;
      number = $(this).attr('name');
      if (number && info.series && info.series.length > 0) {
        for (i = _i = i, _ref = info.series.length; i <= _ref ? _i < _ref : _i > _ref; i = i <= _ref ? ++_i : --_i) {
          series = info.series[i];
          if (series.number !== number) {
            break;
          }
        }
        if (i <= info.series.length) {
          newSeries.push(series);
          newColors.push(series.color);
        } else {
          console.log('no series with number ' + number);
        }
      }
      if (newSeries.length === 0) {
        newSeries.push({
          data: []
        });
        newColors.push('#FFF');
      }
      return info.showWithData(newSeries, newColors);
    }));
  };

  recoverOrderFromCookies = function(report_name) {
    var columnOrder, fail, orderString, val, _i, _len, _ref;
    if (!navigator.cookieEnabled) {
      return null;
    }
    orderString = readCookie(report_name + '_order');
    if (!orderString) {
      return null;
    }
    columnOrder = [];
    fail = false;
    _ref = orderString.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      val = _ref[_i];
      val = parseInt(val);
      if (isNaN(val)) {
        fail = true;
      } else {
        columnOrder.push(val);
      }
    }
    if (fail) {
      return null;
    }
    return columnOrder;
  };

  readJson = function(what) {
    result;
    var e, result;
    try {
      result = JSON.parse($('#' + what + '-json').html());
    } catch (_error) {
      e = _error;
      result = null;
    }
    return result;
  };

  totalReportData = {
    date: null,
    report: null
  };

  report = {
    name: '',
    order: null,
    sample_reports: [],
    metric_storage: {
      common_for_all_samples_section: {
        name: '',
        metrics: []
      },
      sections: []
    }
  };

  section = {
    name: '',
    metrics: [],
    metrics_by_name: {}
  };

  metric = {
    name: '',
    short_name: '',
    description: '',
    quality: '',
    common: true,
    unit: ''
  };

  reporting.buildReport = function() {
    var columnNames, columnOrder, common_records, m, metric_storage, metrics_by_name, plot, plots_html, r, rec, sample_report, sample_reports, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _results;
    if (!(totalReportData = readJson('total-report'))) {
      console.log("Error: cannot read #total-report-json");
      return 1;
    }
    $('#report_date').html('<p>' + totalReportData.date + '</p>');
    report = totalReportData.report;
    metric_storage = report.metric_storage;
    metrics_by_name = metric_storage.common_for_all_samples_section.metrics_by_name;
    _ref = report.records;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rec = _ref[_i];
      common_records = rec;
    }
    for (_j = 0, _len1 = common_records.length; _j < _len1; _j++) {
      r = common_records[_j];
      if (r.metric.name in metrics_by_name) {
        common_records = r;
      }
    }
    reporting.buildCommonRecords(common_records);
    for (section in metric_storage.sections) {
      sample_reports = report.sample_reports;
      _ref1 = sample_reports[0].records;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        rec = _ref1[_k];
        if (_ref2 = rec.metric.name, __indexOf.call((function() {
          var _l, _len3, _ref3, _results;
          _ref3 = section.metrics;
          _results = [];
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            m = _ref3[_l];
            _results.push(m.name);
          }
          return _results;
        })(), _ref2) >= 0) {
          console.log(rec.metric.name);
        }
      }
      columnNames = (function() {
        var _l, _len3, _ref3, _ref4, _results;
        _ref3 = sample_reports[0].records;
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          rec = _ref3[_l];
          if (_ref4 = rec.metric.name, __indexOf.call((function() {
            var _len4, _m, _ref5, _results1;
            _ref5 = section.metrics;
            _results1 = [];
            for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
              m = _ref5[_m];
              _results1.push(m.name);
            }
            return _results1;
          })(), _ref4) >= 0) {
            _results.push(rec.metric.name);
          }
        }
        return _results;
      })();
      columnOrder = (recoverOrderFromCookies(section.name)) || report.order || (function() {
        _results = [];
        for (var _l = 0, _ref3 = columnNames.length; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; 0 <= _ref3 ? _l++ : _l--){ _results.push(_l); }
        return _results;
      }).apply(this);
      reporting.buildTotalReport(report, section, columnOrder);
      plots_html = "";
      for (_m = 0, _len3 = sample_reports.length; _m < _len3; _m++) {
        sample_report = sample_reports[_m];
        _ref4 = sample_report.plots;
        for (_n = 0, _len4 = _ref4.length; _n < _len4; _n++) {
          plot = _ref4[_n];
          plots_html += "<img src=\"" + plot + "\"/>";
        }
      }
      $('#plot').html(plots_html);
    }
    return 0;
  };

}).call(this);

//# sourceMappingURL=build_report.map
