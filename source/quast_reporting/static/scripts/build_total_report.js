// Generated by CoffeeScript 1.7.1
(function() {
  var GREEN_HSL, GREEN_HUE, RED_HUE, add_heatmap, get_meta_tag_contents, metric, report,
    __hasProp = {}.hasOwnProperty;

  String.prototype.trunc = function(n) {
    var _ref;
    return this.substr(0, n - 1) + ((_ref = this.length > n) != null ? _ref : {
      '&hellip;': ''
    });
  };

  report = {
    name: '',
    fpath: '',
    metrics: []
  };

  metric = {
    name: '',
    short_name: '',
    description: '',
    quality: '',
    value: '',
    meta: ''
  };

  get_meta_tag_contents = function(meta) {
    var db, dbs, k, meta_table, novelty, val, values, _i, _len;
    if ((meta != null) && ((function() {
      var _results;
      _results = [];
      for (k in meta) {
        if (!__hasProp.call(meta, k)) continue;
        _results.push(k);
      }
      return _results;
    })()).length !== 0) {
      meta_table = '<table class=\'qc_meta_table\'>\n<tr><td></td>';
      for (novelty in meta) {
        values = meta[novelty];
        meta_table += "<td>" + novelty + "</td>";
      }
      meta_table += '</tr>\n';
      for (novelty in meta) {
        values = meta[novelty];
        dbs = (function() {
          var _results;
          _results = [];
          for (db in values) {
            val = values[db];
            _results.push(db);
          }
          return _results;
        })();
        break;
      }
      for (_i = 0, _len = dbs.length; _i < _len; _i++) {
        db = dbs[_i];
        meta_table += "<tr><td>" + db + "</td>";
        for (novelty in meta) {
          values = meta[novelty];
          meta_table += "<td>" + values[db] + "</td>";
        }
        meta_table += '</tr>\n';
      }
      meta_table += '</table>\n';
      return "class=\"meta_info_span tooltip-meta\" rel=\"tooltip\" title=\"" + meta_table + "\"";
    } else {
      return '';
    }
  };

  RED_HUE = 0;

  GREEN_HUE = 120;

  GREEN_HSL = 'hsl(' + GREEN_HUE + ', 80%, 40%)';

  reporting.buildTotalReport = function(report, columnOrder, date) {
    var cell_contents, hue, legend, lightness, metricNum, metric_html, num, pos, result, sampleName, sampleReport, step, table, value, _i, _j, _k, _l, _len, _ref, _ref1;
    $('#report_date').html('<p>' + date + '</p>');
    table = "<table cellspacing=\"0\" class=\"report_table draggable\" id=\"main_report_table\">";
    table += "<tr class=\"top_row_tr\"> <td id=\"top_left_td\" class=\"left_column_td\"> <span>Sample</span> </td>";
    for (metricNum = _i = 0, _ref = report[0].metrics.length; 0 <= _ref ? _i < _ref : _i > _ref; metricNum = 0 <= _ref ? ++_i : --_i) {
      pos = columnOrder[metricNum];
      metric = report[0].metrics[pos];
      if (metric.description) {
        metric_html = "<a class=\"tooltip-link\" rel=\"tooltip\" title=\"" + metric.description + "\"> " + metric.short_name + " </a>";
      } else {
        metric_html = metric.short_name;
      }
      table += "<td class='second_through_last_col_headers_td' position='" + pos + "'> <span class='drag_handle'><span class='drag_image'></span></span> <span class='metric_name'>" + metric_html + "</span> </td>";
    }
    for (_j = 0, _len = report.length; _j < _len; _j++) {
      sampleReport = report[_j];
      sampleName = sampleReport.name;
      if (sampleReport.name.length > 30) {
        sampleName = "<span title=\"" + sampleName + "\">" + (sampleName.trunc(80)) + "</span>";
      }
      table += "<tr> <td class=\"left_column_td\"> <a class=\"sample_name\" href=\"html_aux/" + sampleName + ".html\">" + sampleName + "</a> </td>";
      for (metricNum = _k = 0, _ref1 = sampleReport.metrics.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; metricNum = 0 <= _ref1 ? ++_k : --_k) {
        pos = columnOrder[metricNum];
        metric = sampleReport.metrics[pos];
        value = metric.value;
        table += "<td metric=\"" + metric.name + "\" quality=\"" + metric.quality + "\"";
        if ((value == null) || value === '') {
          cell_contents = '-';
        } else {
          if (typeof value === 'number') {
            num = value;
            cell_contents = toPrettyString(value);
          } else {
            result = /([0-9\.]+)(.*)/.exec(value);
            num = parseFloat(result[1]);
            cell_contents = toPrettyString(num) + result[2];
          }
          if (num != null) {
            table += ' number="' + value + '">';
          }
        }
        table += "<a " + (get_meta_tag_contents(metric.meta)) + ">" + cell_contents + "</a></td>";
      }
      table += "</tr>";
    }
    table += "</table>";
    $('#report').append(table);
    $('#report_legend').append(legend);
    add_heatmap();
    legend = '<span>';
    step = 6;
    for (hue = _l = RED_HUE; step > 0 ? _l <= GREEN_HUE : _l >= GREEN_HUE; hue = _l += step) {
      lightness = (Math.pow(hue - 75, 2)) / 350 + 35;
      legend += "<span style=\"color: hsl(" + hue + ", 80%, " + lightness + "%);\">";
      switch (hue) {
        case RED_HUE:
          legend += 'w';
          break;
        case RED_HUE + step:
          legend += 'o';
          break;
        case RED_HUE + 2 * step:
          legend += 'r';
          break;
        case RED_HUE + 3 * step:
          legend += 's';
          break;
        case RED_HUE + 4 * step:
          legend += 't';
          break;
        case GREEN_HUE - 3 * step:
          legend += 'b';
          break;
        case GREEN_HUE - 2 * step:
          legend += 'e';
          break;
        case GREEN_HUE - step:
          legend += 's';
          break;
        case GREEN_HUE:
          legend += 't';
          break;
        default:
          legend += '.';
      }
      legend += "</span>";
    }
    return legend += "</span>";
  };

  add_heatmap = function() {
    return $(".report_table td[number]").each(function() {
      var cell, hue, k, lightness, max, maxHue, min, minHue, orther_numbers, other_cells, quality;
      metric = $(this).attr('metric');
      quality = $(this).attr('quality');
      other_cells = $('.report_table').find("td[metric=\"" + metric + "\"][number]");
      orther_numbers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = other_cells.length; _i < _len; _i++) {
          cell = other_cells[_i];
          _results.push($(cell).attr('number'));
        }
        return _results;
      })();
      min = Math.min.apply(null, orther_numbers);
      max = Math.max.apply(null, orther_numbers);
      maxHue = GREEN_HUE;
      minHue = RED_HUE;
      if (quality === 'Less is better') {
        maxHue = RED_HUE;
        minHue = GREEN_HUE;
      }
      if (max === min) {
        return $(other_cells).css('color', GREEN_HSL);
      } else {
        k = (maxHue - minHue) / (max - min);
        hue = 0;
        lightness = 0;
        return other_cells.each(function(i) {
          var number;
          number = orther_numbers[i];
          hue = Math.round(minHue + (number - min) * k);
          lightness = Math.round((Math.pow(hue - 75, 2)) / 350 + 35);
          $(this).css('color', 'hsl(' + hue + ', 80%, ' + lightness + '%)');
          if (orther_numbers.length > 1) {
            return $('#report_legend').show('fast');
          }
        });
      }
    });
  };

}).call(this);

//# sourceMappingURL=build_total_report.map
