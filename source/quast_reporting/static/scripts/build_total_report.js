// Generated by CoffeeScript 1.7.1
(function() {
  var DRAGGABLE_COLUMNS, GREEN_HSL, GREEN_HUE, RED_HUE, get_meta_tag_contents, metric_name, postprocess_cells, records, report,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  String.prototype.trunc = function(n) {
    var _ref;
    return this.substr(0, n - 1) + ((_ref = this.length > n) != null ? _ref : {
      '&hellip;': ''
    });
  };

  report = {
    sample: {
      name: '',
      phenotype: '',
      bam: '',
      bed: '',
      vcf_by_caller: {
        name: '',
        summary_qc_rep_fpaths: [],
        anno_vcf_fpaths: {},
        anno_filt_vcf_fpaths: {}
      }
    },
    fpath: '',
    link: '',
    records: []
  };

  records = {
    metric: null,
    value: '',
    meta: null
  };

  metric_name = {
    name: '',
    short_name: '',
    description: '',
    quality: '',
    presision: 0,
    type: null
  };

  get_meta_tag_contents = function(rec) {
    var db, dbs, k, meta, meta_table, novelty, val, values, _i, _len;
    metric_name = rec.metric;
    meta = rec.meta;
    if ((meta != null) && meta.length !== 0) {
      return "class=\"meta_info_span tooltip-meta\" rel=\"tooltip\"";
      if (typeof meta === 'string') {
        return "class=\"meta_info_span tooltip-meta\" rel=\"tooltip\" title=\"" + meta + "\"";
      } else {
        ((function() {
          var _results;
          _results = [];
          for (k in meta) {
            if (!__hasProp.call(meta, k)) continue;
            _results.push(k);
          }
          return _results;
        })()).length !== 0;
        meta_table = '<table class=\'qc_meta_table\'>\n<tr><td></td>';
        for (novelty in meta) {
          values = meta[novelty];
          if (novelty !== 'all') {
            meta_table += "<td>" + novelty + "</td>";
          }
        }
        meta_table += '</tr>\n';
        for (novelty in meta) {
          values = meta[novelty];
          dbs = (function() {
            var _results;
            _results = [];
            for (db in values) {
              val = values[db];
              if (db !== 'average') {
                _results.push(db);
              }
            }
            return _results;
          })();
          dbs.push('average');
          break;
        }
        for (_i = 0, _len = dbs.length; _i < _len; _i++) {
          db = dbs[_i];
          meta_table += "<tr><td>" + db + "</td>";
          for (novelty in meta) {
            values = meta[novelty];
            if (novelty !== 'all') {
              meta_table += "<td>" + (toPrettyString(values[db], metric_name.unit)) + "</td>";
            }
          }
          meta_table += '</tr>\n';
        }
        meta_table += '</table>\n';
        return "class=\"meta_info_span tooltip-meta\" rel=\"tooltip\" title=\"" + meta_table + "\"";
      }
    }
  };

  RED_HUE = 0;

  GREEN_HUE = 120;

  GREEN_HSL = 'hsl(' + GREEN_HUE + ', 80%, 40%)';

  DRAGGABLE_COLUMNS = false;

  reporting.buildTotalReport = function(report, columnOrder, date) {
    var metric_html, pos, rec, recNum, result, sampleLink, sampleName, sampleReport, table, value, _i, _j, _k, _len, _ref, _ref1;
    $('#report_date').html('<p>' + date + '</p>');
    table = "<table cellspacing=\"0\" class=\"report_table " + (DRAGGABLE_COLUMNS ? 'draggable' : '') + " fix-align-char\" id=\"main_report_table\">";
    table += "\n<tr class=\"top_row_tr\">";
    table += "<td id=\"top_left_td\" class=\"left_column_td\"> <span>Sample</span> </td>";
    for (recNum = _i = 0, _ref = report[0].records.length; 0 <= _ref ? _i < _ref : _i > _ref; recNum = 0 <= _ref ? ++_i : --_i) {
      pos = columnOrder[recNum];
      rec = report[0].records[pos];
      metric_name = rec.metric;
      if (metric_name.description) {
        metric_html = "<a class=\"tooltip-link\" rel=\"tooltip\" title=\"" + metric_name.description + "\"> " + metric_name.short_name + " </a>";
      } else {
        if (metric_name.short_name === void 0) {
          metric_html = metric_name.name;
        } else {
          metric_html = metric_name.short_name;
        }
      }
      table += "<td class='second_through_last_col_headers_td' position='" + pos + "'> " + (DRAGGABLE_COLUMNS ? '<span class=\'drag_handle\'><span class=\'drag_image\'></span></span>' : '') + " <span class='metric_name'>" + metric_html + "</span> </td>";
    }
    for (_j = 0, _len = report.length; _j < _len; _j++) {
      sampleReport = report[_j];
      sampleName = sampleReport.sample.name;
      sampleLink = sampleReport.link;
      if (sampleName.length > 30) {
        sampleName = "<span title=\"" + sampleName + "\">" + (sampleName.trunc(80)) + "</span>";
      }
      table += "\n<tr> <td class=\"left_column_td\"> <a class=\"sample_name\" href=\"" + sampleLink + "\">" + sampleName + "</a> </td>";
      for (recNum = _k = 0, _ref1 = sampleReport.records.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; recNum = 0 <= _ref1 ? ++_k : --_k) {
        pos = columnOrder[recNum];
        rec = sampleReport.records[pos];
        metric_name = rec.metric;
        value = rec.value;
        if ((value == null) || value === '') {
          rec.cell_contents = '-';
        } else {
          if (typeof value === 'number') {
            rec.num = value;
            rec.cell_contents = toPrettyString(value, metric_name.unit);
          } else if (/^-?.?[0-9]/.test(value)) {
            result = /([0-9\.]+)(.*)/.exec(value);
            rec.num = parseFloat(result[1]);
            rec.cell_contents = toPrettyString(rec.num, metric_name.unit) + result[2];
          } else {
            rec.cell_contents = value;
          }
        }
        table += "<td metric_name=\"" + metric_name.name + "\" class='number' quality=\"" + metric_name.quality + "\"";
        if (rec.num != null) {
          table += ' number="' + rec.value + '">';
        }
        table += "<a " + (get_meta_tag_contents(rec)) + ">" + rec.cell_contents + "</a></td>";
      }
      table += "</tr>";
    }
    table += "\n</table>\n";
    $('#report').append(table);
    return postprocess_cells();
  };

  postprocess_cells = function() {
    var CSS_PROP_TO_COLOR, get_color, processes_metrics, set_heatmap, set_legend, set_offset;
    CSS_PROP_TO_COLOR = 'background-color';
    get_color = function(hue) {
      var lightness;
      lightness = 85;
      return 'hsl(' + hue + ', 80%, ' + lightness + '%)';
    };
    set_heatmap = function(all_cells, all_numbers, quality) {
      var k, max, maxHue, min, minHue;
      min = Math.min.apply(null, all_numbers);
      max = Math.max.apply(null, all_numbers);
      maxHue = GREEN_HUE;
      minHue = RED_HUE;
      if (quality === 'Less is better') {
        maxHue = RED_HUE;
        minHue = GREEN_HUE;
      }
      if (max === min) {
        return $(all_cells).css(CSS_PROP_TO_COLOR, get_color(GREEN_HUE));
      } else {
        k = (maxHue - minHue) / (max - min);
        return all_cells.each(function(i) {
          var hue, number;
          number = all_numbers[i];
          hue = Math.round(minHue + (number - min) * k);
          $(this).css(CSS_PROP_TO_COLOR, get_color(hue));
          if (all_numbers.length > 1) {
            return $('#report_legend').show('fast');
          }
        });
      }
    };
    set_offset = function(all_cells, all_numbers, metric_name) {
      var a, cell, i, left, left_part, left_part_width, left_part_widths, max_left_part_width, num, offset, parts, text, width, _i, _j, _len, _ref, _ref1, _results;
      if (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = all_numbers.length; _i < _len; _i++) {
          num = all_numbers[_i];
          if (isFractional(num)) {
            _results.push(num);
          }
        }
        return _results;
      })()).length === 0) {
        return console.log('Integer: ' + metric_name);
      } else {
        console.log('Decimal: ' + metric_name);
        left_part_widths = [];
        max_left_part_width = 0;
        _ref = $(all_cells);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          text = $(cell).text();
          parts = text.split('.');
          left = parts[parts.length - 1];
          left_part = (left != null) && left !== 'undefined' ? '.' + left : left_part = '';
          width = $.fn.textWidth(left_part, $(cell).css('font'));
          left_part_widths.push(width);
          if (width > max_left_part_width) {
            max_left_part_width = width;
          }
        }
        _results = [];
        for (i = _j = 0, _ref1 = left_part_widths.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          left_part_width = left_part_widths[i];
          if (max_left_part_width !== left_part_width) {
            cell = $(all_cells[i]);
            a = cell.children('a');
            offset = a.offset();
            offset.left -= max_left_part_width - left_part_width;
            _results.push(a.offset(offset));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    set_legend = function() {
      var hue, legend, lightness, step, _i;
      legend = '<span>';
      step = 6;
      for (hue = _i = RED_HUE; step > 0 ? _i <= GREEN_HUE : _i >= GREEN_HUE; hue = _i += step) {
        lightness = (Math.pow(hue - 75, 2)) / 350 + 35;
        legend += "<span style=\"color: hsl(" + hue + ", 80%, " + lightness + "%);\">";
        switch (hue) {
          case RED_HUE:
            legend += 'w';
            break;
          case RED_HUE + step:
            legend += 'o';
            break;
          case RED_HUE + 2 * step:
            legend += 'r';
            break;
          case RED_HUE + 3 * step:
            legend += 's';
            break;
          case RED_HUE + 4 * step:
            legend += 't';
            break;
          case GREEN_HUE - 3 * step:
            legend += 'b';
            break;
          case GREEN_HUE - 2 * step:
            legend += 'e';
            break;
          case GREEN_HUE - step:
            legend += 's';
            break;
          case GREEN_HUE:
            legend += 't';
            break;
          default:
            legend += '.';
        }
        legend += "</span>";
      }
      legend += "</span>";
      return $('#report_legend').append(legend);
    };
    $.fn.textWidth = function(text, font) {
      if (!$.fn.textWidth.fakeEl) {
        $.fn.textWidth.fakeEl = $('<span>').hide().appendTo(document.body);
      }
      $.fn.textWidth.fakeEl.text(text);
      $.fn.textWidth.fakeEl.css('font', font);
      return $.fn.textWidth.fakeEl.width();
    };
    processes_metrics = [];
    $(".report_table td[number]").each(function() {
      var all_cells, all_numbers, cell, quality;
      metric_name = $(this).attr('metric_name');
      if (!(__indexOf.call(processes_metrics, metric_name) >= 0)) {
        processes_metrics.push(metric_name);
        console.log(metric_name);
        quality = $(this).attr('quality');
        all_cells = $('.report_table').find("td[metric_name=\"" + metric_name + "\"][number]");
        all_numbers = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = all_cells.length; _i < _len; _i++) {
            cell = all_cells[_i];
            _results.push($(cell).attr('number'));
          }
          return _results;
        })();
        set_heatmap(all_cells, all_numbers, quality);
        return set_offset(all_cells, all_numbers, metric_name);
      }
    });
    return set_legend();
  };

}).call(this);

//# sourceMappingURL=build_total_report.map
