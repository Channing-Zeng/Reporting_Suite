// Generated by CoffeeScript 1.7.1
(function() {
  var readJson, recoverOrderFromCookies, showPlotWithInfo, totalReportData;

  showPlotWithInfo = function(info) {
    var newColors, newSeries;
    newSeries = [];
    newColors = [];
    return $('#legend-placeholder').find('input:checked'.each(function() {
      var i, number, series, _i, _ref;
      number = $(this).attr('name');
      if (number && info.series && info.series.length > 0) {
        for (i = _i = i, _ref = info.series.length; i <= _ref ? _i < _ref : _i > _ref; i = i <= _ref ? ++_i : --_i) {
          series = info.series[i];
          if (series.number !== number) {
            break;
          }
        }
        if (i <= info.series.length) {
          newSeries.push(series);
          newColors.push(series.color);
        } else {
          console.log('no series with number ' + number);
        }
      }
      if (newSeries.length === 0) {
        newSeries.push({
          data: []
        });
        newColors.push('#FFF');
      }
      return info.showWithData(newSeries, newColors);
    }));
  };

  recoverOrderFromCookies = function() {
    var columnOrder, fail, orderString, val, _i, _len, _ref;
    if (!navigator.cookieEnabled) {
      return null;
    }
    orderString = readCookie("order");
    if (!orderString) {
      return null;
    }
    columnOrder = [];
    fail = false;
    _ref = orderString.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      val = _ref[_i];
      val = parseInt(val);
      if (isNaN(val)) {
        fail = true;
      } else {
        columnOrder.push(val);
      }
    }
    if (fail) {
      return null;
    }
    return columnOrder;
  };

  readJson = function(what) {
    result;
    var e, result;
    try {
      result = JSON.parse($('#' + what + '-json').html());
    } catch (_error) {
      e = _error;
      result = null;
    }
    return result;
  };

  totalReportData = {
    report: null,
    date: null,
    order: null
  };

  reporting.buildReport = function() {
    var columnNames, columnOrder, date, glossary, metric, order, report, _i, _ref, _results;
    glossary = JSON.parse($('#glossary-json').html());
    if (!(totalReportData = readJson('total-report'))) {
      console.log("Error: cannot read #total-report-json");
      return 1;
    }
    report = totalReportData.report;
    if (report === []) {
      return 1;
    }
    date = totalReportData.date;
    order = totalReportData.order;
    columnNames = (function() {
      var _i, _len, _ref, _results;
      _ref = report[0].metrics;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        metric = _ref[_i];
        _results.push(metric.name);
      }
      return _results;
    })();
    columnOrder = recoverOrderFromCookies() || order || (function() {
      _results = [];
      for (var _i = 0, _ref = columnNames.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    reporting.buildTotalReport(report, columnOrder, date, glossary);
    return 0;
  };

}).call(this);

//# sourceMappingURL=build_report.map
